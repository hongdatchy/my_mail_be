package com.vtidc.mymail.controller.exception;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.util.List;
import java.util.Map;

/**
 * do Exception là cha của các class Exception khác (runtimeException, badCredentialsException...)
 * nên cần đặt ở cuối
 */
@ControllerAdvice
public class ResponseExceptionHandler extends ResponseEntityExceptionHandler {
    private static final Logger LOG = LoggerFactory.getLogger(ResponseExceptionHandler.class);
    private static final Map<String, String> FIELD_NAMES = Map.of(
            "displayName", "Họ và tên",
            "email", "Email"
    );


    @ExceptionHandler({ RuntimeException.class })
    public ResponseEntity<Object> globalRuntimeExceptionHandler(Exception ex) {
        ex.printStackTrace();
        String msg = ex.getMessage();
        LOG.error(msg);
        return ResponseEntity.badRequest().body(msg);
    }




    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex,
            HttpHeaders headers,
            HttpStatusCode status,
            WebRequest request) {

        List<String> errors = ex.getBindingResult()
                .getFieldErrors()
                .stream()
                .map(error -> {
                    String friendlyName = FIELD_NAMES.getOrDefault(error.getField(), error.getField());
                    return String.format("Trường '%s' %s", friendlyName, error.getDefaultMessage());
                })
                .toList();

        String errorMessage = String.join("\n", errors);
        return ResponseEntity.badRequest().body(errorMessage);
    }
    
//    @ExceptionHandler({ BadCredentialsException.class })
//    protected ResponseEntity<Object> handleBadCredentialsException(BadCredentialsException ex) {
//        String msg = ex.getMessage();
//        LOG.info(msg);
//        return ResponseEntity.ok(MyResponse.fail("User hoặc password không hợp lệ"));
//    }

    @ExceptionHandler({ Exception.class })
    public ResponseEntity<Object> globalExceptionHandler(Exception ex) {
        ex.printStackTrace();
        String msg = ex.getMessage();
        LOG.error(msg);
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Internal server error");
    }

}

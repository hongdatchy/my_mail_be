package com.vtidc.mymail.config;

import com.vtidc.mymail.dto.zimbra.AuthRequest;
import com.vtidc.mymail.dto.zimbra.AuthResponse;
import com.vtidc.mymail.service.ZimbraAuthService;
import org.apache.http.client.HttpClient;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.oxm.jaxb.Jaxb2Marshaller;
import org.springframework.stereotype.Service;
import org.springframework.ws.client.WebServiceClientException;
import org.springframework.ws.client.core.WebServiceTemplate;
import org.springframework.ws.client.support.interceptor.ClientInterceptor;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.soap.SoapMessage;
import org.springframework.ws.soap.saaj.SaajSoapMessageFactory;
import org.springframework.ws.transport.http.HttpComponentsMessageSender;
import org.springframework.xml.transform.StringSource;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.util.Objects;

@Service
public class SecurityInterceptorService implements ClientInterceptor {

    @Autowired
    private TokenMemory tokenMemory;

    @Autowired
    private Jaxb2Marshaller marshaller;

    private static final String ZIMBRA_ADMIN_URL = "https://mail.example.com:7071/service/admin/soap";

    private AuthResponse authenticateAndGetAccount(String username, String password) {
        try {
            HttpClient client = HttpClients.custom()
                    .addInterceptorFirst(new RemoveSoapHeadersInterceptor())
                    .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)
                    .setSSLContext(new SSLContextBuilder()
                            .loadTrustMaterial(null, (chain, authType) -> true)
                            .build())
                    .build();

            SaajSoapMessageFactory messageFactory = new SaajSoapMessageFactory();
            messageFactory.afterPropertiesSet();

            WebServiceTemplate webServiceTemplate = new WebServiceTemplate(messageFactory);
            webServiceTemplate.setMarshaller(marshaller);
            webServiceTemplate.setUnmarshaller(marshaller);
            AuthRequest authRequest = new AuthRequest(username, password);
            HttpComponentsMessageSender messageSender = new HttpComponentsMessageSender(client);

            webServiceTemplate.setMessageSender(messageSender);
            return (AuthResponse) webServiceTemplate.
                    marshalSendAndReceive(ZIMBRA_ADMIN_URL, authRequest);
        } catch (Exception ignored) {
            return null;
        }
    }

    @Override
    public boolean handleRequest(MessageContext messageContext) throws WebServiceClientException {
        SoapMessage soapMessage = (SoapMessage) messageContext.getRequest();

        String token = tokenMemory.getToken();
        if (token == null || tokenMemory.isTokenExpired()) {
            tokenMemory.saveToken(Objects.requireNonNull(authenticateAndGetAccount("admin", "hongdat10")));
        }
        String headerXml =
                "<context xmlns=\"urn:zimbra\">" +
                        "<authToken>" + token + "</authToken>" +
                        "</context>";


        try {
            Transformer transformer;
            StringSource headerSource = new StringSource(headerXml);
            transformer = TransformerFactory.newInstance().newTransformer();
            transformer.transform(headerSource, soapMessage.getSoapHeader().getResult());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return true;
    }

    @Override
    public boolean handleResponse(MessageContext messageContext) throws WebServiceClientException {
        return false;
    }

    @Override
    public boolean handleFault(MessageContext messageContext) throws WebServiceClientException {
        return false;
    }

    @Override
    public void afterCompletion(MessageContext messageContext, Exception e) throws WebServiceClientException {

    }
}
